using Cosmos.Core;
using Cosmos.System;
using Cosmos.System.Graphics;
using Cosmos.System.Network.Config;
using Cosmos.System.Network.IPv4;
using Cosmos.System.Network.IPv4.TCP;
using Cosmos.System.Network.IPv4.UDP.DNS;
using CrystalOSAlpha.Applications.Calculator;
using CrystalOSAlpha.Graphics;
using CrystalOSAlpha.Graphics.Engine;
using CrystalOSAlpha.Graphics.TaskBar;
using CrystalOSAlpha.UI_Elements;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection.Metadata;
using System.Text;
using System.Threading.Tasks;
using TaskScheduler = CrystalOSAlpha.Graphics.TaskScheduler;

namespace CrystalOSAlpha.Applications.Settings
{
    class Settings : App
    {
        public int x { get; set; }
        public int y { get; set; }
        public int z { get; set; }
        public int width { get; set; }
        public int height { get; set; }
        public int desk_ID { get; set; }
        public int AppID { get; set; }
        public string name { get; set; }
        public bool minimised { get; set; }
        public bool movable { get; set; }
        public Bitmap icon { get; set; }

        public int CurrentColor = ImprovedVBE.colourToNumber(Global_integers.R, Global_integers.G, Global_integers.B);
        
        public bool initial = true;
        public bool clicked = false;
        public bool once = true;

        public string ActiveD = "Display";
        public string customres = "";

        public Bitmap back_canvas;
        public Bitmap window;
        public Bitmap canvas;
        public Bitmap MiniWallp;

        public List<Button_prop> Res = new List<Button_prop>();
        public List<Button_prop> Buttons = new List<Button_prop>();
        public List<Button_prop> Colors = new List<Button_prop>();
        public List <VerticalScrollbar> VerticalScrollbar = new List<VerticalScrollbar>();
        public List <Slider> Slider = new List<Slider>();

        public void App()
        {
            if (initial == true)
            {
                Buttons.Clear();
                VerticalScrollbar.Clear();

                Buttons.Add(new Button_prop(5, 32, 98, 30, "Display", 1));
                Buttons.Add(new Button_prop(5, 73, 98, 30, "Appearance", 1));
                Buttons.Add(new Button_prop(5, 114, 98, 30, "Sound", 1));
                Buttons.Add(new Button_prop(5, 155, 98, 30, "Networking", 1));
                Buttons.Add(new Button_prop(5, 196, 98, 30, "About OS", 1));

                switch (ActiveD)
                {
                    case "Display":
                        Buttons.Add(new Button_prop(303, 338, 98, 20, "Apply", 1));

                        Res.Add(new Button_prop(2, 2, 396, 30, "1920x1080x32", 1));
                        Res.Add(new Button_prop(2, 32, 396, 30, "1366x768x32", 1));
                        Res.Add(new Button_prop(2, 62, 396, 30, "1024x768x32", 1));
                        Res.Add(new Button_prop(2, 92, 396, 30, "800x600x32", 1));
                        Res.Add(new Button_prop(2, 122, 396, 30, "640x480x32", 1));
                        break;
                    case "Appearance":
                        VerticalScrollbar.Add(new UI_Elements.VerticalScrollbar(516, 62, 20, 308, 20, 0, 800));
                        MiniWallp = ImprovedVBE.ScaleImageStock(ImprovedVBE.Temp, 140, 78);

                        //All these color presets were evacuated from CrystalOS 1.0. Rest In Peace my friend...
                        Colors.Add(new Button_prop(6, 160, 20, 20, "", Color.Green.ToArgb(), "CrystalGreen"));
                        Colors.Add(new Button_prop(34, 160, 20, 20, "", Color.Blue.ToArgb(), "CrystalBlue"));
                        Colors.Add(new Button_prop(62, 160, 20, 20, "", Color.Yellow.ToArgb(), "CrystalYellow"));
                        Colors.Add(new Button_prop(90, 160, 20, 20, "", Color.Red.ToArgb(), "CrystalRed"));
                        Colors.Add(new Button_prop(118, 160, 20, 20, "", Color.Orange.ToArgb(), "CrystalOrange"));
                        Colors.Add(new Button_prop(146, 160, 20, 20, "", 1, "CrystalBlack"));
                        Colors.Add(new Button_prop(174, 160, 20, 20, "", Color.Pink.ToArgb(), "CrystalPink"));
                        Colors.Add(new Button_prop(202, 160, 20, 20, "", Color.Purple.ToArgb(), "CrystalPurple"));
                        Colors.Add(new Button_prop(230, 160, 20, 20, "", Color.Aqua.ToArgb(), "CrystalAqua"));
                        Colors.Add(new Button_prop(258, 160, 20, 20, "", Color.White.ToArgb(), "CrystalWhite"));

                        //New color palett
                        //Generated by non other than ChatGPT
                        Colors.Add(new Button_prop(6, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 215, 0), "GoldenSunshine"));
                        Colors.Add(new Button_prop(34, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 127, 80), "CoralOrange"));
                        Colors.Add(new Button_prop(62, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 204, 104), "PeachPink"));
                        Colors.Add(new Button_prop(90, 190, 20, 20, "", Color.SkyBlue.ToArgb(), "SkyBlue"));
                        Colors.Add(new Button_prop(118, 190, 20, 20, "", ImprovedVBE.colourToNumber(30, 144, 255), "OceanBlue"));
                        Colors.Add(new Button_prop(146, 190, 20, 20, "", ImprovedVBE.colourToNumber(64, 224, 208), "TurquoiseTeal"));
                        Colors.Add(new Button_prop(174, 190, 20, 20, "", ImprovedVBE.colourToNumber(0, 128, 0), "EmeraldGreen"));
                        Colors.Add(new Button_prop(202, 190, 20, 20, "", ImprovedVBE.colourToNumber(152, 255, 152), "MintGreen"));
                        Colors.Add(new Button_prop(230, 190, 20, 20, "", ImprovedVBE.colourToNumber(204, 204, 255), "LavenderPurple"));
                        Colors.Add(new Button_prop(258, 190, 20, 20, "", ImprovedVBE.colourToNumber(192, 192, 192), "SoothingGray"));

                        //Load from file button
                        Colors.Add(new Button_prop(6, 243, 110, 25, "Load from file", 1, "LoadFile"));

                        //Add 3 sliders for color settings
                        Slider.Add(new Slider(6, 356, 290, 1, 255, Global_integers.R, "WindowRed"));
                        Slider.Add(new Slider(6, 380, 290, 1, 255, Global_integers.G, "WindowGreen"));
                        Slider.Add(new Slider(6, 404, 290, 1, 255, Global_integers.B, "WindowBlue"));

                        Slider.Add(new Slider(6, 457, 290, 1, 255, Global_integers.TaskBarR, "TaskbarRed"));
                        Slider.Add(new Slider(6, 481, 290, 1, 255, Global_integers.TaskBarG, "TaskbarGreen"));
                        Slider.Add(new Slider(6, 505, 290, 1, 255, Global_integers.TaskBarB, "TaskbarBlue"));

                        Slider.Add(new Slider(6, 563, 290, 1, 255, Global_integers.StartColor.R, "SatrtRed"));
                        Slider.Add(new Slider(6, 587, 290, 1, 255, Global_integers.StartColor.G, "StartGreen"));
                        Slider.Add(new Slider(6, 611, 290, 1, 255, Global_integers.StartColor.B, "StartBlue"));
                        break;
                    case "Sound":
                        
                        break;
                    case "Networking":
                        
                        break;
                    case "About OS":
                        
                        break;
                }

                once = true;
                initial = false;
            }
            if (once == true)
            {
                (canvas, back_canvas, window) = WindowGenerator.Generate(x, y, width, height, CurrentColor, name);

                foreach (var button in Buttons)
                {
                    if (button.Clicked == true)
                    {
                        Button.Button_render(canvas, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                        switch (button.Text)
                        {
                            case "Display":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Appearance":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Sound":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Networking":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "About OS":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                        }
                        button.Clicked = false;
                    }
                    else
                    {
                        Button.Button_render(canvas, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                    }
                    if (MouseManager.MouseState == MouseState.None)
                    {
                        button.Clicked = false;
                    }
                }

                switch (ActiveD)
                {
                    case "Display":
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);
                        
                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Current resolution: " + ImprovedVBE.width + "x" + ImprovedVBE.height + "x32", 128, 48);
                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Available resolutions:", 128, 73);
                        //Add a resolution selector here

                        Bitmap res = new Bitmap(400, 210, ColorDepth.ColorDepth32);
                        Array.Fill(res.RawData, ImprovedVBE.colourToNumber(36, 36, 36));
                        ImprovedVBE.DrawFilledRectangle(res, ImprovedVBE.colourToNumber(60, 60, 60), 2, 2, (int)(res.Width - 4), (int)(res.Height - 4), false);

                        #region res buttons
                        foreach(var button in Res)
                        {
                            if (button.Clicked == true)
                            {
                                Button.Button_render(res, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                                switch (button.Text)
                                {
                                    case "1920x1080x32":
                                        ImprovedVBE.width = 1920;
                                        ImprovedVBE.height = 1080;

                                        MouseManager.ScreenWidth = 1920;
                                        MouseManager.ScreenHeight = 1080;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1600x900x32":
                                        ImprovedVBE.width = 1600;
                                        ImprovedVBE.height = 900;

                                        MouseManager.ScreenWidth = 1600;
                                        MouseManager.ScreenHeight = 900;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1366x768x32":
                                        ImprovedVBE.width = 1366;
                                        ImprovedVBE.height = 768;

                                        MouseManager.ScreenWidth = 1366;
                                        MouseManager.ScreenHeight = 768;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1024x768x32":
                                        ImprovedVBE.width = 1024;
                                        ImprovedVBE.height = 768;

                                        MouseManager.ScreenWidth = 1024;
                                        MouseManager.ScreenHeight = 768;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "800x600x32":
                                        ImprovedVBE.width = 800;
                                        ImprovedVBE.height = 600;

                                        MouseManager.ScreenWidth = 800;
                                        MouseManager.ScreenHeight = 600;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "640x480x32":
                                        ImprovedVBE.width = 640;
                                        ImprovedVBE.height = 480;

                                        MouseManager.ScreenWidth = 640;
                                        MouseManager.ScreenHeight = 480;
                                        ImprovedVBE.Res = true;
                                        break;
                                }
                                button.Clicked = false;
                            }
                            else
                            {
                                Button.Button_render(res, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                            }
                            if (MouseManager.MouseState == MouseState.None)
                            {
                                button.Clicked = false;
                            }
                        }
                        #endregion

                        ImprovedVBE.DrawImageAlpha(res, 128, 100, canvas);

                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, " Use custom resolution:", 128, 317);

                        TextBox.Box(canvas, 128, 338, 157, 20, ImprovedVBE.colourToNumber(60, 60, 60), customres, "Example: 800x600x32", TextBox.Options.left);

                        break;
                    case "Appearance":
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        Bitmap Container = new Bitmap(408, 308, ColorDepth.ColorDepth32);
                        //Copy a clear chunk from canvas
                        for(int i = 0; i < Container.Height; i++)
                        {
                            Array.Copy(canvas.RawData, (62 + i) * canvas.Width + 128, Container.RawData, Container.Width * i, Container.Width);
                        }

                        #region Wallpapers
                        //Render the header texts to the screen
                        BitFont.DrawBitFontString(Container, "VerdanaCustomCharset24", Color.White, "Wallpapers", 6, 7 - VerticalScrollbar[0].Value);
                        //Render stock wallpaper with type
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Use default", 6, 40 - VerticalScrollbar[0].Value);
                        ImprovedVBE.DrawImage(MiniWallp, 6, 63 - VerticalScrollbar[0].Value, Container);
                        //Render buttons with type
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Use monocolor presets", 6, 154 - VerticalScrollbar[0].Value);
                        foreach (var button in Colors)
                        {
                            if (button.ID.StartsWith("Crystal"))
                            {
                                button.Y = 182 - VerticalScrollbar[0].Value;
                            }
                            else if (button.ID.StartsWith("LoadFile"))
                            {
                                button.Y = 265 - VerticalScrollbar[0].Value;
                            }
                            else
                            {
                                button.Y = 212 - VerticalScrollbar[0].Value;
                            }
                            if (button.Clicked == true)
                            {
                                Button.Button_render(Container, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                            }
                            else
                            {
                                Button.Button_render(Container, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                            }
                            if (MouseManager.MouseState == MouseState.None)
                            {
                                button.Clicked = false;
                            }
                        }
                        //Render LoadfromFile button
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Load from file", 6, 242 - VerticalScrollbar[0].Value);
                        #endregion Wallpapers

                        #region Global color settings
                        //Render the header texts to the screen
                        BitFont.DrawBitFontString(Container, "VerdanaCustomCharset24", Color.White, "Global color settings", 6, 316 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Window color", 6, 344 - VerticalScrollbar[0].Value);
                        //Render every slider
                        foreach(var v in Slider)
                        {
                            switch (v.ID)
                            {
                                case "WindowRed":
                                    v.Y = 378 - VerticalScrollbar[0].Value;
                                    break;
                                case "WindowGreen":
                                    v.Y = 402 - VerticalScrollbar[0].Value;
                                    break;
                                case "WindowBlue":
                                    v.Y = 426 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarRed":
                                    v.Y = 479 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarGreen":
                                    v.Y = 503 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarBlue":
                                    v.Y = 527 - VerticalScrollbar[0].Value;
                                    break;

                                case "SatrtRed":
                                    v.Y = 585 - VerticalScrollbar[0].Value;
                                    break;
                                case "StartGreen":
                                    v.Y = 609 - VerticalScrollbar[0].Value;
                                    break;
                                case "StartBlue":
                                    v.Y = 633 - VerticalScrollbar[0].Value;
                                    break;
                            }
                            v.Render(Container);
                        }
                        //Draw out the color values
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[0].Value, 308, 372 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[1].Value, 308, 396 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[2].Value, 308, 420 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Taskbar color", 6, 449 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[3].Value, 308, 473 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[4].Value, 308, 497 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[5].Value, 308, 521 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Start color(titlebar)", 6, 555 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[6].Value, 308, 579 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[7].Value, 308, 603 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[8].Value, 308, 627 - VerticalScrollbar[0].Value);
                        #endregion Global color settings
                        //Render the Container
                        ImprovedVBE.DrawImage(Container, 128, 62, canvas);
                        //Render the vertical scrollbar on the window
                        foreach (var vscroll in VerticalScrollbar)
                        {
                            vscroll.Render(canvas);
                        }
                        break;
                    case "Sound":
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);
                        break;
                    case "Networking":
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Attempting to ping google.com - 8.8.8.8", 128, 75);

                        if(VMTools.IsVMWare == true)
                        {
                            int PacketSent = 0;
                            int PacketReceived = 0;
                            int PacketLost = 0;
                            int PercentLoss;

                            Address source;
                            Address destination = Address.Parse("8.8.8.8");

                            if (destination != null)
                            {
                                source = IPConfig.FindNetwork(destination);
                            }
                            else //Make a DNS request if it's not an IP
                            {
                                var xClient = new DnsClient();
                                xClient.Connect(DNSConfig.DNSNameservers[0]);
                                xClient.SendAsk("google.com");
                                destination = xClient.Receive();
                                xClient.Close();

                                if (destination == null)
                                {
                                
                                }

                                source = IPConfig.FindNetwork(destination);
                            }
                            try
                            {
                                var xClient = new ICMPClient();
                                xClient.Connect(destination);

                                for (int i = 0; i < 4; i++)
                                {
                                    xClient.SendEcho();

                                    PacketSent++;

                                    var endpoint = new EndPoint(Address.Zero, 0);

                                    int second = xClient.Receive(ref endpoint, 4000);

                                    if (second == -1)
                                    {
                                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Failed to recieve ICMP packet: Timeout\n\nNetwork status: Offline", 128, 102);
                                        PacketLost++;
                                    }
                                    else
                                    {
                                        if (second < 1)
                                        {
                                            BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Successfuly recieved ICMP packet: " + second + "\n\nNetwork status: Online", 128, 102);
                                        }
                                        else if (second >= 1)
                                        {
                                            BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Successfuly recieved ICMP packet: " + second + "\n\nNetwork status: Online", 128, 102);
                                        }

                                        PacketReceived++;
                                    }
                                }

                                xClient.Close();
                            }
                            catch
                            {
                            
                            }

                            PercentLoss = 25 * PacketLost;
                        }
                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, NetworkConfiguration.CurrentAddress.ToString(), 128, 48);
                        break;
                    case "About OS":
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);
                        
                        BitFont.DrawBitFontString(canvas, "VerdanaCustomCharset24", Color.White, "CrystalOS Alpha Edition", 128, 58);

                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Build release: 2024032714", 128, 95);
                        string cpuname = CPU.GetCPUBrandString();
                        if(cpuname.Length > 20)
                        {
                            cpuname = cpuname.Insert(20, "\n");
                        }
                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "System Processor: " + cpuname, 128, 122);
                        BitFont.DrawBitFontString(canvas, "ArialCustomCharset16", Color.White, "Amount of RAM: " + CPU.GetAmountOfRAM() + "MB", 128, 155);
                        break;
                }

                Array.Copy(canvas.RawData, 0, window.RawData, 0, canvas.RawData.Length);
                once = false;
            }

            foreach (var button in Buttons)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X && MouseManager.X < x + button.X + button.Width)
                    {
                        if (MouseManager.Y > y + button.Y && MouseManager.Y < y + button.Y + button.Height)
                        {
                            if (clicked == false)
                            {
                                button.Clicked = true;
                                once = true;
                                clicked = true;
                            }
                        }
                    }
                }
            }

            foreach (var button in Res)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X + 128 && MouseManager.X < x + button.X + button.Width + 128)
                    {
                        if (MouseManager.Y > y + button.Y + 100 && MouseManager.Y < y + button.Y + button.Height + 100)
                        {
                            if (clicked == false)
                            {
                                button.Clicked = true;
                                once = true;
                                clicked = true;
                            }
                        }
                    }
                }
            }

            foreach (var vscroll in VerticalScrollbar)
            {
                if (vscroll.CheckClick((int)MouseManager.X - x, (int)MouseManager.Y - y))
                {
                    once = true;
                }
            }

            if (TaskScheduler.counter == TaskScheduler.Apps.Count - 1)
            {
                KeyEvent key;
                if (KeyboardManager.TryReadKey(out key))
                {
                    customres = Keyboard.HandleKeyboard(customres, key);
                    once = true;
                }
            }

            if (MouseManager.MouseState == MouseState.None && clicked == true)
            {
                once = true;
                clicked = false;
            }

            ImprovedVBE.DrawImageAlpha(window, x, y, ImprovedVBE.cover);
            foreach (var button in Colors)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X + 128 && MouseManager.X < x + button.X + button.Width + 128)
                    {
                        if (MouseManager.Y > y + button.Y + 62 && MouseManager.Y < y + button.Y + button.Height + 62)
                        {
                            switch (button.ID)
                            {
                                case "CrystalGreen":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Green.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalBlue":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Blue.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalYellow":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Yellow.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalOrange":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Orange.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalRed":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Red.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalBlack":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Black.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalPink":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Pink.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalPurple":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Purple.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalAqua":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Aqua.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CrystalWhite":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.White.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;

                                case "GoldenSunshine":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "CoralOrange":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "PeachPink":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "SkyBlue":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "OceanBlue":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "TurquoiseTeal":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "EmeraldGreen":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "MintGreen":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "LavenderPurple":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "SoothingGray":
                                    Global_integers.Background_type = "Monocolor";
                                    Global_integers.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    break;
                                case "LoadFile":
                                    if (VMTools.IsVMWare == true)
                                    {
                                        //RequestFile via WindowMessenger
                                        //Write data to config file
                                        File.WriteAllText("0:\\User\\System\\Appearance.sys", "Wallpaper=Default");
                                    }
                                    break;
                            }
                        }
                    }
                    if(MouseManager.X > x + 134 && MouseManager.X < x + 134 + MiniWallp.Width)
                    {
                        if(MouseManager.Y > y + 125 - VerticalScrollbar[0].Value && MouseManager.Y < y + 125 - VerticalScrollbar[0].Value + MiniWallp.Height)
                        {
                            Global_integers.Background_type = "Default";
                            ImprovedVBE.Temp.RawData.CopyTo(ImprovedVBE.data.RawData, 0);
                            TaskManager.resize = true;
                            TaskManager.Time = 99;
                        }
                    }
                }
            }
            foreach (var v in Slider)
            {
                if(v.CheckForClick(x + 128, y + 62))
                {
                    once = true;
                    v.UpdateValue(x + 128);
                    switch (v.ID)
                    {
                        case "WindowRed":
                            Global_integers.R = v.Value;
                            break;
                        case "WindowGreen":
                            Global_integers.G = v.Value;
                            break;
                        case "WindowBlue":
                            Global_integers.B = v.Value;
                            break;
                        case "TaskbarRed":
                            Global_integers.TaskBarR = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "TaskbarGreen":
                            Global_integers.TaskBarG = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "TaskbarBlue":
                            Global_integers.TaskBarB = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "SatrtRed":
                            Color StartR = Color.FromArgb(v.Value, Global_integers.StartColor.G, Global_integers.StartColor.B);
                            Global_integers.StartColor = StartR;
                            break;
                        case "StartGreen":
                            Color StartG = Color.FromArgb(Global_integers.StartColor.R, v.Value, Global_integers.StartColor.B);
                            Global_integers.StartColor = StartG;
                            break;
                        case "StartBlue":
                            Color StartB = Color.FromArgb(Global_integers.StartColor.R, Global_integers.StartColor.G, v.Value);
                            Global_integers.StartColor = StartB;
                            break;
                    }
                }
            }
        }
    }
}
