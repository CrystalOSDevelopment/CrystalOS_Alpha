using Cosmos.Core;
using Cosmos.System;
using Cosmos.System.Graphics;
using CrystalOSAlpha.Graphics;
using CrystalOSAlpha.Graphics.Engine;
using CrystalOSAlpha.Graphics.TaskBar;
using CrystalOSAlpha.UI_Elements;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using TaskScheduler = CrystalOSAlpha.Graphics.TaskScheduler;

namespace CrystalOSAlpha.Applications.Settings
{
    class Settings : App
    {
        public int x { get; set; }
        public int y { get; set; }
        public int z { get; set; }
        public int width { get; set; }
        public int height { get; set; }
        public int desk_ID { get; set; }
        public int AppID { get; set; }
        public string name { get; set; }
        public bool minimised { get; set; }
        public bool movable { get; set; }
        public Bitmap icon { get; set; }

        public int CurrentColor = ImprovedVBE.colourToNumber(GlobalValues.R, GlobalValues.G, GlobalValues.B);
        
        public bool initial = true;
        public bool clicked = false;
        public bool once { get; set; }
        public bool temp = true;

        public string ActiveD = "Display";
        public string customres = "";

        public Bitmap back_canvas;
        public Bitmap window { get; set; }
        public Bitmap canvas;
        public Bitmap MiniWallp;

        public List<Button_prop> Res = new List<Button_prop>();
        public List<Button_prop> Buttons = new List<Button_prop>();
        public List<Button_prop> Colors = new List<Button_prop>();
        public List <VerticalScrollbar> VerticalScrollbar = new List<VerticalScrollbar>();
        public List <Slider> Slider = new List<Slider>();

        public void App()
        {
            if (initial == true)
            {
                Buttons.Clear();
                VerticalScrollbar.Clear();

                Buttons.Add(new Button_prop(5, 32, 98, 30, "Display", 1));
                Buttons.Add(new Button_prop(5, 73, 98, 30, "Appearance", 1));
                Buttons.Add(new Button_prop(5, 114, 98, 30, "Sound", 1));
                Buttons.Add(new Button_prop(5, 155, 98, 30, "Networking", 1));
                Buttons.Add(new Button_prop(5, 196, 98, 30, "About OS", 1));

                switch (ActiveD)
                {
                    case "Display":
                        Buttons.Add(new Button_prop(303, 338, 98, 20, "Apply", 1));

                        Res.Add(new Button_prop(2, 2, 396, 30, "1920x1080x32", 1));
                        Res.Add(new Button_prop(2, 32, 396, 30, "1366x768x32", 1));
                        Res.Add(new Button_prop(2, 62, 396, 30, "1024x768x32", 1));
                        Res.Add(new Button_prop(2, 92, 396, 30, "800x600x32", 1));
                        Res.Add(new Button_prop(2, 122, 396, 30, "640x480x32", 1));
                        break;
                    case "Appearance":
                        VerticalScrollbar.Add(new UI_Elements.VerticalScrollbar(516, 62, 20, 308, 20, 0, 800));
                        MiniWallp = ImprovedVBE.ScaleImageStock(ImprovedVBE.Temp, 140, 78);

                        //All these color presets were evacuated from CrystalOS 1.0. Rest In Peace my friend...
                        Colors.Add(new Button_prop(6, 160, 20, 20, "", Color.Green.ToArgb(), "CrystalGreen"));
                        Colors.Add(new Button_prop(34, 160, 20, 20, "", Color.Blue.ToArgb(), "CrystalBlue"));
                        Colors.Add(new Button_prop(62, 160, 20, 20, "", Color.Yellow.ToArgb(), "CrystalYellow"));
                        Colors.Add(new Button_prop(90, 160, 20, 20, "", Color.Red.ToArgb(), "CrystalRed"));
                        Colors.Add(new Button_prop(118, 160, 20, 20, "", Color.Orange.ToArgb(), "CrystalOrange"));
                        Colors.Add(new Button_prop(146, 160, 20, 20, "", 1, "CrystalBlack"));
                        Colors.Add(new Button_prop(174, 160, 20, 20, "", Color.Pink.ToArgb(), "CrystalPink"));
                        Colors.Add(new Button_prop(202, 160, 20, 20, "", Color.Purple.ToArgb(), "CrystalPurple"));
                        Colors.Add(new Button_prop(230, 160, 20, 20, "", Color.Aqua.ToArgb(), "CrystalAqua"));
                        Colors.Add(new Button_prop(258, 160, 20, 20, "", Color.White.ToArgb(), "CrystalWhite"));

                        //New color palett
                        //Generated by non other than ChatGPT
                        Colors.Add(new Button_prop(6, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 215, 0), "GoldenSunshine"));
                        Colors.Add(new Button_prop(34, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 127, 80), "CoralOrange"));
                        Colors.Add(new Button_prop(62, 190, 20, 20, "", ImprovedVBE.colourToNumber(255, 204, 104), "PeachPink"));
                        Colors.Add(new Button_prop(90, 190, 20, 20, "", Color.SkyBlue.ToArgb(), "SkyBlue"));
                        Colors.Add(new Button_prop(118, 190, 20, 20, "", ImprovedVBE.colourToNumber(30, 144, 255), "OceanBlue"));
                        Colors.Add(new Button_prop(146, 190, 20, 20, "", ImprovedVBE.colourToNumber(64, 224, 208), "TurquoiseTeal"));
                        Colors.Add(new Button_prop(174, 190, 20, 20, "", ImprovedVBE.colourToNumber(0, 128, 0), "EmeraldGreen"));
                        Colors.Add(new Button_prop(202, 190, 20, 20, "", ImprovedVBE.colourToNumber(152, 255, 152), "MintGreen"));
                        Colors.Add(new Button_prop(230, 190, 20, 20, "", ImprovedVBE.colourToNumber(204, 204, 255), "LavenderPurple"));
                        Colors.Add(new Button_prop(258, 190, 20, 20, "", ImprovedVBE.colourToNumber(192, 192, 192), "SoothingGray"));

                        //Load from file button
                        Colors.Add(new Button_prop(6, 243, 110, 25, "Load from file", 1, "LoadFile"));

                        //Add 3 sliders for color settings
                        Slider.Add(new Slider(6, 356, 290, 1, 255, GlobalValues.R, "WindowRed"));
                        Slider.Add(new Slider(6, 380, 290, 1, 255, GlobalValues.G, "WindowGreen"));
                        Slider.Add(new Slider(6, 404, 290, 1, 255, GlobalValues.B, "WindowBlue"));

                        Slider.Add(new Slider(6, 457, 290, 1, 255, GlobalValues.TaskBarR, "TaskbarRed"));
                        Slider.Add(new Slider(6, 481, 290, 1, 255, GlobalValues.TaskBarG, "TaskbarGreen"));
                        Slider.Add(new Slider(6, 505, 290, 1, 255, GlobalValues.TaskBarB, "TaskbarBlue"));

                        Slider.Add(new Slider(6, 563, 290, 1, 255, GlobalValues.StartColor.R, "SatrtRed"));
                        Slider.Add(new Slider(6, 587, 290, 1, 255, GlobalValues.StartColor.G, "StartGreen"));
                        Slider.Add(new Slider(6, 611, 290, 1, 255, GlobalValues.StartColor.B, "StartBlue"));

                        Slider.Add(new Slider(6, 660, 290, 1, 255, GlobalValues.EndColor.R, "EndRed"));
                        Slider.Add(new Slider(6, 684, 290, 1, 255, GlobalValues.EndColor.G, "EndGreen"));
                        Slider.Add(new Slider(6, 708, 290, 1, 255, GlobalValues.EndColor.B, "EndBlue"));

                        Slider.Add(new Slider(6, 763, 290, 0, 100, GlobalValues.LevelOfTransparency, "Transparency"));

                        Slider.Add(new Slider(6, 856, 290, 0, 255, GlobalValues.IconR, "IconR"));
                        Slider.Add(new Slider(6, 880, 290, 0, 255, GlobalValues.IconG, "IconG"));
                        Slider.Add(new Slider(6, 904, 290, 0, 255, GlobalValues.IconB, "IconB"));

                        Colors.Add(new Button_prop(6, 921, 130, 25, "Nostalgia", 1, "Old"));
                        Colors.Add(new Button_prop(151, 921, 130, 25, "Float-up", 1, "Animated"));
                        break;
                    case "Sound":
                        
                        break;
                    case "Networking":
                        
                        break;
                    case "About OS":
                        
                        break;
                }

                once = true;
                initial = false;
            }
            if (once == true)
            {
                (canvas, back_canvas, window) = WindowGenerator.Generate(x, y, width, height, CurrentColor, name);

                Array.Copy(canvas.RawData, 0, window.RawData, 0, canvas.RawData.Length);
                once = false;
                temp = true;
            }

            foreach (var button in Buttons)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X && MouseManager.X < x + button.X + button.Width)
                    {
                        if (MouseManager.Y > y + button.Y && MouseManager.Y < y + button.Y + button.Height)
                        {
                            if (clicked == false)
                            {
                                button.Clicked = true;
                                temp = true;
                                clicked = true;
                            }
                        }
                    }
                }
            }

            foreach (var button in Res)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X + 128 && MouseManager.X < x + button.X + button.Width + 128)
                    {
                        if (MouseManager.Y > y + button.Y + 100 && MouseManager.Y < y + button.Y + button.Height + 100)
                        {
                            if (clicked == false)
                            {
                                button.Clicked = true;
                                temp = true;
                                clicked = true;
                            }
                        }
                    }
                }
                else
                {
                    if(button.Clicked == true && MouseManager.MouseState == MouseState.None)
                    {
                        button.Clicked = false;
                        temp = true;
                    }
                }
            }

            foreach (var vscroll in VerticalScrollbar)
            {
                vscroll.Height = height - 72;
                vscroll.x = width - 34;
                if (vscroll.CheckClick((int)MouseManager.X - x, (int)MouseManager.Y - y))
                {
                    temp = true;
                }
                else if(MouseManager.ScrollWheelPresent == true && MouseManager.ScrollDelta != 0 && TaskScheduler.Apps[^1] == this)
                {
                    temp = true;
                }
            }

            if (TaskScheduler.counter == TaskScheduler.Apps.Count - 1)
            {
                KeyEvent key;
                if (KeyboardManager.TryReadKey(out key))
                {
                    customres = Keyboard.HandleKeyboard(customres, key);
                    temp = true;
                }
            }

            if (MouseManager.MouseState == MouseState.None && clicked == true)
            {
                temp = true;
                clicked = false;
            }

            if(temp == true)
            {
                Array.Copy(canvas.RawData, 0, window.RawData, 0, canvas.RawData.Length);

                foreach (var button in Buttons)
                {
                    if (button.Clicked == true)
                    {
                        Button.Button_render(window, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                        switch (button.Text)
                        {
                            case "Display":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Appearance":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Sound":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "Networking":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                            case "About OS":
                                ActiveD = button.Text;
                                initial = true;
                                break;
                        }
                        button.Clicked = false;
                    }
                    else
                    {
                        Button.Button_render(window, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                    }
                    if (MouseManager.MouseState == MouseState.None)
                    {
                        button.Clicked = false;
                    }
                }

                switch (ActiveD)
                {
                    case "Display":
                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Current resolution: " + ImprovedVBE.width + "x" + ImprovedVBE.height + "x32", 128, 48);
                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Available resolutions:", 128, 73);
                        //Add a resolution selector here

                        Bitmap res = new Bitmap((uint)width - 150, 210, ColorDepth.ColorDepth32);
                        Array.Fill(res.RawData, ImprovedVBE.colourToNumber(36, 36, 36));
                        ImprovedVBE.DrawFilledRectangle(res, ImprovedVBE.colourToNumber(60, 60, 60), 2, 2, (int)(res.Width - 4), (int)(res.Height - 4), false);

                        #region res buttons
                        foreach (var button in Res)
                        {
                            button.Width = (int)res.Width - 3;
                            if (button.Clicked == true)
                            {
                                Button.Button_render(res, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                                switch (button.Text)
                                {
                                    case "1920x1080x32":
                                        ImprovedVBE.width = 1920;
                                        ImprovedVBE.height = 1080;

                                        MouseManager.ScreenWidth = 1920;
                                        MouseManager.ScreenHeight = 1080;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1600x900x32":
                                        ImprovedVBE.width = 1600;
                                        ImprovedVBE.height = 900;

                                        MouseManager.ScreenWidth = 1600;
                                        MouseManager.ScreenHeight = 900;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1366x768x32":
                                        ImprovedVBE.width = 1366;
                                        ImprovedVBE.height = 768;

                                        MouseManager.ScreenWidth = 1366;
                                        MouseManager.ScreenHeight = 768;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "1024x768x32":
                                        ImprovedVBE.width = 1024;
                                        ImprovedVBE.height = 768;

                                        MouseManager.ScreenWidth = 1024;
                                        MouseManager.ScreenHeight = 768;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "800x600x32":
                                        ImprovedVBE.width = 800;
                                        ImprovedVBE.height = 600;

                                        MouseManager.ScreenWidth = 800;
                                        MouseManager.ScreenHeight = 600;
                                        ImprovedVBE.Res = true;
                                        break;
                                    case "640x480x32":
                                        ImprovedVBE.width = 640;
                                        ImprovedVBE.height = 480;

                                        MouseManager.ScreenWidth = 640;
                                        MouseManager.ScreenHeight = 480;
                                        ImprovedVBE.Res = true;
                                        break;
                                }
                                button.Clicked = false;
                            }
                            else
                            {
                                Button.Button_render(res, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                            }
                            if (MouseManager.MouseState == MouseState.None)
                            {
                                button.Clicked = false;
                            }
                        }
                        #endregion

                        ImprovedVBE.DrawImageAlpha(res, 128, 100, window);

                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Use custom resolution:", 128, 317);

                        TextBox.Box(window, 128, 338, 157, 20, ImprovedVBE.colourToNumber(60, 60, 60), customres, "Example: 800x600x32", TextBox.Options.left);

                        break;
                    case "Appearance":
                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        Bitmap Container = new Bitmap((uint)width - 162, (uint)height - 72, ColorDepth.ColorDepth32);
                        //Copy a clear chunk from canvas
                        for (int i = 0; i < Container.Height; i++)
                        {
                            Array.Copy(canvas.RawData, (62 + i) * canvas.Width + 128, Container.RawData, Container.Width * i, Container.Width);
                        }

                        #region Wallpapers
                        //Render the header texts to the screen
                        BitFont.DrawBitFontString(Container, "VerdanaCustomCharset24", Color.White, "Wallpapers", 6, 7 - VerticalScrollbar[0].Value);
                        //Render stock wallpaper with type
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Use default", 6, 40 - VerticalScrollbar[0].Value);
                        ImprovedVBE.DrawImage(MiniWallp, 6, 63 - VerticalScrollbar[0].Value, Container);
                        //Render buttons with type
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Use monocolor presets", 6, 154 - VerticalScrollbar[0].Value);
                        foreach (var button in Colors)
                        {
                            if (button.ID.StartsWith("Crystal"))
                            {
                                button.Y = 182 - VerticalScrollbar[0].Value;
                            }
                            else if (button.ID.StartsWith("LoadFile"))
                            {
                                button.Y = 265 - VerticalScrollbar[0].Value;
                            }
                            else if (button.ID.StartsWith("Old"))
                            {
                                button.Y = 943 - VerticalScrollbar[0].Value;
                            }
                            else if (button.ID.StartsWith("Animated"))
                            {
                                button.Y = 943 - VerticalScrollbar[0].Value;
                            }
                            else
                            {
                                button.Y = 212 - VerticalScrollbar[0].Value;
                            }
                            if (button.Color == ImprovedVBE.data.RawData[^1])
                            {
                                button.Text = "X";
                            }
                            else
                            {
                                if (button.Text.Length < 2)
                                {
                                    button.Text = "";
                                }
                            }
                            if (button.Clicked == true)
                            {
                                Button.Button_render(Container, button.X, button.Y, button.Width, button.Height, Color.White.ToArgb(), button.Text);
                            }
                            else
                            {
                                Button.Button_render(Container, button.X, button.Y, button.Width, button.Height, button.Color, button.Text);
                            }
                            if (MouseManager.MouseState == MouseState.None)
                            {
                                button.Clicked = false;
                            }
                        }
                        //Render LoadfromFile button
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Load from file", 6, 242 - VerticalScrollbar[0].Value);
                        #endregion Wallpapers

                        #region Global color settings
                        //Render the header texts to the screen
                        BitFont.DrawBitFontString(Container, "VerdanaCustomCharset24", Color.White, "Global color settings", 6, 316 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Window color", 6, 344 - VerticalScrollbar[0].Value);
                        //Render every slider
                        foreach (var v in Slider)
                        {
                            switch (v.ID)
                            {
                                case "WindowRed":
                                    v.Y = 378 - VerticalScrollbar[0].Value;
                                    break;
                                case "WindowGreen":
                                    v.Y = 402 - VerticalScrollbar[0].Value;
                                    break;
                                case "WindowBlue":
                                    v.Y = 426 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarRed":
                                    v.Y = 479 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarGreen":
                                    v.Y = 503 - VerticalScrollbar[0].Value;
                                    break;
                                case "TaskbarBlue":
                                    v.Y = 527 - VerticalScrollbar[0].Value;
                                    break;
                                case "SatrtRed":
                                    v.Y = 585 - VerticalScrollbar[0].Value;
                                    break;
                                case "StartGreen":
                                    v.Y = 609 - VerticalScrollbar[0].Value;
                                    break;
                                case "StartBlue":
                                    v.Y = 633 - VerticalScrollbar[0].Value;
                                    break;

                                case "EndRed":
                                    v.Y = 682 - VerticalScrollbar[0].Value;
                                    break;
                                case "EndGreen":
                                    v.Y = 706 - VerticalScrollbar[0].Value;
                                    break;
                                case "EndBlue":
                                    v.Y = 730 - VerticalScrollbar[0].Value;
                                    break;
                                case "Transparency":
                                    v.Y = 785 - VerticalScrollbar[0].Value;
                                    break;

                                case "IconR":
                                    v.Y = 834 - VerticalScrollbar[0].Value;
                                    break;
                                case "IconG":
                                    v.Y = 858 - VerticalScrollbar[0].Value;
                                    break;
                                case "IconB":
                                    v.Y = 882 - VerticalScrollbar[0].Value;
                                    break;
                            }
                            v.Render(Container);
                        }
                        //Draw out the color values
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[0].Value, 308, 372 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[1].Value, 308, 396 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[2].Value, 308, 420 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Taskbar color", 6, 449 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[3].Value, 308, 473 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[4].Value, 308, 497 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[5].Value, 308, 521 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Start color(titlebar)", 6, 555 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[6].Value, 308, 579 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[7].Value, 308, 603 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[8].Value, 308, 627 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "End color(titlebar)", 6, 652 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[9].Value, 308, 676 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[10].Value, 308, 700 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[11].Value, 308, 724 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Transparency", 6, 754 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Level: " + (100 - Slider[12].Value) / 100.0f, 308, 779 - VerticalScrollbar[0].Value);

                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Icon background", 6, 804 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Red: " + Slider[13].Value, 308, 828 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Green: " + Slider[14].Value, 308, 852 - VerticalScrollbar[0].Value);
                        BitFont.DrawBitFontString(Container, "ArialCustomCharset16", Color.White, "Blue: " + Slider[15].Value, 308, 876 - VerticalScrollbar[0].Value);
                        #endregion Global color settings

                        #region Menubar options
                        BitFont.DrawBitFontString(Container, "VerdanaCustomCharset24", Color.White, "Menubar options", 6, 909 - VerticalScrollbar[0].Value);
                        #endregion Menubar options
                        //Render the Container
                        ImprovedVBE.DrawImage(Container, 128, 62, window);
                        //Render the vertical scrollbar on the window
                        foreach (var vscroll in VerticalScrollbar)
                        {
                            if(MouseManager.ScrollDelta != 0)
                            {
                                vscroll.Value = Math.Clamp(vscroll.Value + MouseManager.ScrollDelta * 10, vscroll.MinVal, vscroll.MaxVal);
                                vscroll.Pos = (int)(vscroll.Value / vscroll.Sensitivity) + 20;
                            }
                            vscroll.Render(window);
                        }
                        break;
                    case "Sound":
                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);
                        break;
                    case "Networking":
                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Not implemented or not in working condition", 128, 75);
                        
                        break;
                    case "About OS":
                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, ActiveD, width - BitFont.DrawBitFontString(back_canvas, "VerdanaCustomCharset24", Color.White, ActiveD, 0, 0) - 5, 24);

                        BitFont.DrawBitFontString(window, "VerdanaCustomCharset24", Color.White, "CrystalOS Alpha Edition", 128, 58);

                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Build release: 2024032714", 128, 95);
                        string cpuname = CPU.GetCPUBrandString();
                        if (cpuname.Length > 20)
                        {
                            cpuname = cpuname.Insert(20, "\n");
                        }
                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "System Processor: " + cpuname, 128, 122);
                        BitFont.DrawBitFontString(window, "ArialCustomCharset16", Color.White, "Amount of RAM: " + CPU.GetAmountOfRAM() + "MB", 128, 155);
                        break;
                }

                //Save changed style
                if(VMTools.IsVMWare == true)
                {
                    string Layout =
                    "WindowR=" + GlobalValues.R +
                    "\nWindowG=" + GlobalValues.G +
                    "\nWindowB=" + GlobalValues.B +
                    "\nTaskbarR=" + GlobalValues.TaskBarR +
                    "\nTaskbarG=" + GlobalValues.TaskBarG +
                    "\nTaskbarB=" + GlobalValues.TaskBarB +
                    "\nTaskbarType=" + GlobalValues.TaskBarType +
                    "\nUsername=" + GlobalValues.Username +
                    "\nIconR=" + GlobalValues.IconR +
                    "\nIconG=" + GlobalValues.IconG +
                    "\nIconB=" + GlobalValues.IconB +
                    "\nIconwidth=" + GlobalValues.IconWidth +
                    "\nIconheight=" + GlobalValues.IconHeight +
                    "\nStartcolor=" + GlobalValues.StartColor.ToArgb() +
                    "\nEndcolor=" + GlobalValues.EndColor.ToArgb() +
                    "\nBakground=" + GlobalValues.Background_type +
                    "\nBackgroundcolor=" + GlobalValues.Background_color +
                    "\nTransparency=" + GlobalValues.LevelOfTransparency;

                    string s = File.ReadAllText("0:\\System\\Layout.sys");
                    if(s != Layout)
                    {
                        File.WriteAllText("0:\\System\\Layout.sys", Layout);
                    }
                }
                temp = false;
            }

            ImprovedVBE.DrawImageAlpha(window, x, y, ImprovedVBE.cover);
            foreach (var button in Colors)
            {
                if (MouseManager.MouseState == MouseState.Left)
                {
                    if (MouseManager.X > x + button.X + 128 && MouseManager.X < x + button.X + button.Width + 128)
                    {
                        if (MouseManager.Y > y + button.Y + 62 && MouseManager.Y < y + button.Y + button.Height + 62 && button.Y > 0 && button.Y < 308)
                        {
                            switch (button.ID)
                            {
                                case "CrystalGreen":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Green.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalBlue":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Blue.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalYellow":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Yellow.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalOrange":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Orange.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalRed":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Red.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalBlack":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Black.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalPink":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Pink.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalPurple":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Purple.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalAqua":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.Aqua.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CrystalWhite":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, Color.White.ToArgb());
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;

                                case "GoldenSunshine":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "CoralOrange":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "PeachPink":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "SkyBlue":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "OceanBlue":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "TurquoiseTeal":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "EmeraldGreen":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "MintGreen":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "LavenderPurple":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "SoothingGray":
                                    GlobalValues.Background_type = "Monocolor";
                                    GlobalValues.Background_color = button.ID;
                                    Array.Fill(ImprovedVBE.data.RawData, button.Color);
                                    TaskManager.resize = true;
                                    TaskManager.Time = 99;
                                    temp = true;
                                    break;
                                case "LoadFile":
                                    if (VMTools.IsVMWare == true)
                                    {
                                        //RequestFile via WindowMessenger
                                        //Write data to config file
                                        File.WriteAllText("0:\\User\\System\\Appearance.sys", "Wallpaper=Default");
                                    }
                                    break;
                                case "Old":
                                    GlobalValues.TaskBarType = "Nostalgia";
                                    TaskManager.ClearLists();
                                    TaskManager.initial = true;
                                    TaskManager.resize = true;
                                    break;
                                case "Animated":
                                    GlobalValues.TaskBarType = "Classic";
                                    TaskManager.ClearLists();
                                    TaskManager.initial = true;
                                    TaskManager.resize = true;
                                    break;
                            }
                            clicked = true;
                        }
                    }
                    if(MouseManager.X > x + 134 && MouseManager.X < x + 134 + MiniWallp.Width)
                    {
                        if(MouseManager.Y > y + 125 - VerticalScrollbar[0].Value && MouseManager.Y < y + 125 - VerticalScrollbar[0].Value + MiniWallp.Height && MouseManager.Y > y + 62)
                        {
                            GlobalValues.Background_type = "Default";
                            ImprovedVBE.Temp.RawData.CopyTo(ImprovedVBE.data.RawData, 0);
                            TaskManager.resize = true;
                            TaskManager.Time = 99;
                        }
                    }
                }
            }
            foreach (var v in Slider)
            {
                if(v.CheckForClick(x + 128, y + 62))
                {
                    temp = true;
                    v.UpdateValue(x + 128);
                    switch (v.ID)
                    {
                        case "WindowRed":
                            GlobalValues.R = v.Value;
                            break;
                        case "WindowGreen":
                            GlobalValues.G = v.Value;
                            break;
                        case "WindowBlue":
                            GlobalValues.B = v.Value;
                            break;
                        case "TaskbarRed":
                            GlobalValues.TaskBarR = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "TaskbarGreen":
                            GlobalValues.TaskBarG = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "TaskbarBlue":
                            GlobalValues.TaskBarB = v.Value;
                            TaskManager.resize = true;
                            break;
                        case "SatrtRed":
                            Color StartR = Color.FromArgb(v.Value, GlobalValues.StartColor.G, GlobalValues.StartColor.B);
                            GlobalValues.StartColor = StartR;
                            break;
                        case "StartGreen":
                            Color StartG = Color.FromArgb(GlobalValues.StartColor.R, v.Value, GlobalValues.StartColor.B);
                            GlobalValues.StartColor = StartG;
                            break;
                        case "StartBlue":
                            Color StartB = Color.FromArgb(GlobalValues.StartColor.R, GlobalValues.StartColor.G, v.Value);
                            GlobalValues.StartColor = StartB;
                            break;
                        case "EndRed":
                            Color EndR = Color.FromArgb(v.Value, GlobalValues.EndColor.G, GlobalValues.EndColor.B);
                            GlobalValues.EndColor = EndR;
                            break;
                        case "EndGreen":
                            Color EndG = Color.FromArgb(GlobalValues.EndColor.R, v.Value, GlobalValues.EndColor.B);
                            GlobalValues.EndColor = EndG;
                            break;
                        case "EndBlue":
                            Color EndB = Color.FromArgb(GlobalValues.EndColor.R, GlobalValues.EndColor.G, v.Value);
                            GlobalValues.EndColor = EndB;
                            break;
                        case "IconR":
                            GlobalValues.IconR = v.Value;
                            break;
                        case "IconG":
                            GlobalValues.IconG = v.Value;
                            break;
                        case "IconB":
                            GlobalValues.IconB = v.Value;
                            break;
                        case "Transparency":
                            if(v.Value > 40)
                            {
                                TaskManager.resize = true;
                                GlobalValues.LevelOfTransparency = v.Value;
                            }
                            break;
                    }
                }
            }
        }

        public void RightClick()
        {

        }
    }
}
